<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1510814034840" ID="ID_1916687132" MODIFIED="1510814194020" TEXT="udhcpc">
<font BOLD="true" ITALIC="true" NAME="SansSerif" SIZE="20"/>
<node CREATED="1510814126054" ID="ID_1609106234" MODIFIED="1510814897767" POSITION="right">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#37325;&#35201;&#32467;&#26500;&#20307;&#35299;&#35835;
    </p>
  </body>
</html></richcontent>
<node CREATED="1510814174804" ID="ID_168331752" MODIFIED="1510814574819">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct <font color="#3c25de">client_config_t</font>&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;char foreground;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Do not fork */
    </p>
    <p>
      &#160;&#160;&#160;&#160;char quit_after_lease;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Quit after obtaining lease */
    </p>
    <p>
      &#160;&#160;&#160;&#160;char abort_if_no_lease;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Abort if no lease */
    </p>
    <p>
      &#160;&#160;&#160;&#160;char background_if_no_lease;&#160;&#160;&#160;&#160;/* Fork to background if no lease */
    </p>
    <p>
      &#160;&#160;&#160;&#160;char *interface;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* The name of the interface to use */
    </p>
    <p>
      &#160;&#160;&#160;&#160;char *pidfile;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Optionally store the process ID */
    </p>
    <p>
      &#160;&#160;&#160;&#160;char *script;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* User script to run at dhcp events */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned char *clientid;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Optional client id to use */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned char *hostname;&#160;&#160;&#160;&#160;/* Optional hostname to use */
    </p>
    <p>
      &#160;&#160;&#160;&#160;int ifindex;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Index number of the interface to use */
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned char arp[6];&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Our arp address */
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1510814171640" ID="ID_1004544027" MODIFIED="1510814738783" POSITION="right">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#ea0505">udhcpc -i wlan0 -q</font>&#160;&#25191;&#34892;&#27969;&#31243;
    </p>
  </body>
</html></richcontent>
<node CREATED="1510814687821" ID="ID_755331909" MODIFIED="1510815660106">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct client_config_t client_config = {
    </p>
    <p>
      &#160;&#160;&#160;&#160;/* Default options. */
    </p>
    <p>
      &#160;&#160;&#160;&#160;abort_if_no_lease: 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;foreground: 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#d70303">quit_after_lease</font>: 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;background_if_no_lease: 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#df1414">interface</font>: &quot;eth0&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;pidfile: NULL,
    </p>
    <p>
      &#160;&#160;&#160;&#160;script: DEFAULT_SCRIPT, /* /usr/share/udhcpc/default.script */
    </p>
    <p>
      &#160;&#160;&#160;&#160;clientid: NULL,
    </p>
    <p>
      &#160;&#160;&#160;&#160;hostname: NULL,
    </p>
    <p>
      &#160;&#160;&#160;&#160;<font color="#da0808">ifindex</font>: 0,
    </p>
    <p>
      &#160;&#160;&#160;&#160;arp: &quot;\0\0\0\0\0\0&quot;,&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* appease gcc-3.0 */
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
<font NAME="SansSerif" SIZE="12"/>
</node>
<node CREATED="1510814690360" ID="ID_825198357" MODIFIED="1510815654456" TEXT="int main(int argc, char *argv[])">
<node CREATED="1510814868894" FOLDED="true" ID="ID_1173053611" MODIFIED="1515567741027">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /**
    </p>
    <p>
      &#160;* client_config.pidfile = NULL,&#160;&#22240;&#27492; pid_fd = -1
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      pid_fd = pidfile_acquire(client_config.pidfile);
    </p>
  </body>
</html></richcontent>
<node CREATED="1510814866789" ID="ID_880408684" MODIFIED="1510815491594">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      int pidfile_acquire(char *pidfile)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;int pid_fd;
    </p>
    <p>
      
    </p>
    <p>
      <font color="#e40606">&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#e40606">&#160;&#160;&#160;&#160;&#160;* &#23454;&#38469;&#20256;&#20837;pidfile = NULL, &#20989;&#25968;&#30452;&#25509;&#36864;&#20986; </font>
    </p>
    <p>
      <font color="#e40606">&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (pidfile == NULL) return -1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;pid_fd = open(pidfile, O_CREAT | O_WRONLY, 0644);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (pid_fd &lt; 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_ERR, &quot;Unable to open pidfile %s: %s\n&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pidfile, strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lockf(pid_fd, F_LOCK, 0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return pid_fd;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1510814869386" FOLDED="true" ID="ID_865636386" MODIFIED="1515567741859" TEXT="pidfile_write_release(pid_fd);">
<node CREATED="1510815390158" ID="ID_129208326" MODIFIED="1510815470865">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void pidfile_write_release(int pid_fd)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;FILE *out;
    </p>
    <p>
      
    </p>
    <p>
      <font color="#ea0000">&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#ea0000">&#160;&#160;&#160;&#160;&#160;* &#23454;&#38469;&#20256;&#20837;pid_fd &lt; 0, &#20989;&#25968;&#30452;&#25509;&#36864;&#20986; </font>
    </p>
    <p>
      <font color="#ea0000">&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (pid_fd &lt; 0) return;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((out = fdopen(pid_fd, &quot;w&quot;)) != NULL) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fprintf(out, &quot;%d\n&quot;, getpid());
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fclose(out);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;lockf(pid_fd, F_UNLCK, 0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;close(pid_fd);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1510814870102" FOLDED="true" ID="ID_1970028386" MODIFIED="1515569341693">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#eb1818">/** </font>
    </p>
    <p>
      <font color="#eb1818">&#160;* &#27492;&#20989;&#25968;&#21151;&#33021;&#26159;&#33719;&#21462;client.config.interface&#25351;&#23450;&#30340;&#25509;&#21475;&#20449;&#24687;&#65292; </font>
    </p>
    <p>
      <font color="#eb1818">&#160;* &#28982;&#21518;&#21021;&#22987;&#21270;client.config.ifindex &#21644; client.config.arp </font>
    </p>
    <p>
      <font color="#eb1818">&#160;*/</font>
    </p>
    <p>
      if (read_interface(client_config.interface, &amp;client_config.ifindex,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NULL, client_config.arp) &lt; 0)
    </p>
    <p>
      &#160;&#160;&#160;&#160;exit_client(1);
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1510815916095" ID="ID_937399028" MODIFIED="1510816479205">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      int read_interface(char *interface, int *ifindex, u_int32_t *addr, unsigned char *arp)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;int fd;
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct ifreq ifr;
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct sockaddr_in *our_ip;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;memset(&amp;ifr, 0, sizeof(struct ifreq));
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/**
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* &#21019;&#24314;ioctrl&#29992;&#30340;socket&#25991;&#20214;&#25551;&#36848;&#31526;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;if((fd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) &gt;= 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ifr.ifr_addr.sa_family = AF_INET;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;strcpy(ifr.ifr_name, interface);&#160;&#160;// interface = &quot;wlan0&quot;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (addr) {
    </p>
    <p>
      <font color="#ef0000">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#ef0000">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#33719;&#21462; ip &#22320;&#22336;, &#23454;&#38469;&#20256;&#20837;addr = NULL, &#27492;&#37096;&#20998;&#20195;&#30721;&#19981;&#25191;&#34892; </font>
    </p>
    <p>
      <font color="#ef0000">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ioctl(fd, SIOCGIFADDR, &amp;ifr) == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_ip = (struct sockaddr_in *) &amp;ifr.ifr_addr;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*addr = our_ip-&gt;sin_addr.s_addr;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_INFO, &quot;%s (our ip) = %s&quot;, ifr.ifr_name, inet_ntoa(our_ip-&gt;sin_addr));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_ERR, &quot;SIOCGIFADDR failed, is the interface up and configured?: %s&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      <font color="#df0303">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#df0303">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#33719;&#21462;&#25509;&#21475;&#65288;wlan0&#65289;&#30340;&#20559;&#31227;&#25968;, &#30001;&#21442;&#25968;ifindex&#36820;&#22238; </font>
    </p>
    <p>
      <font color="#df0303">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ioctl(fd, SIOCGIFINDEX, &amp;ifr) == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_INFO, &quot;adapter index %d&quot;, ifr.ifr_ifindex);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*ifindex = ifr.ifr_ifindex;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_ERR, &quot;SIOCGIFINDEX failed!: %s&quot;, strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      <font color="#cc0101">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#cc0101">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#25509;&#21475;&#65288;wlan0&#65289;&#30340;mac&#22320;&#22336;, &#30001;&#21442;&#25968;arp&#36820;&#22238; </font>
    </p>
    <p>
      <font color="#cc0101">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (ioctl(fd, SIOCGIFHWADDR, &amp;ifr) == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;memcpy(arp, ifr.ifr_hwaddr.sa_data, 6);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_INFO, &quot;adapter hardware address %02x:%02x:%02x:%02x:%02x:%02x&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arp[0], arp[1], arp[2], arp[3], arp[4], arp[5]);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_ERR, &quot;SIOCGIFHWADDR failed!: %s&quot;, strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_ERR, &quot;socket failed!: %s&quot;, strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;close(fd); /* &#20851;&#38381;&#22871;&#25509;&#23383;&#160; */
    </p>
    <p>
      &#160;&#160;&#160;&#160;return 0;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1510815513309" ID="ID_510622128" MODIFIED="1510816647251">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      if (!client_config.clientid) {
    </p>
    <p>
      <font color="#d71313">&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#d71313">&#160;&#160;&#160;&#160;&#160;* &#35774;&#32622;udhcpc&#65288;&#23458;&#25143;&#31471;&#65289;&#30340;id, &#27599;&#20010;udhcpc&#26377;&#21807;&#19968;&#30340;id </font>
    </p>
    <p>
      <font color="#d71313">&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;client_config.clientid = xmalloc(6 + 3);
    </p>
    <p>
      &#160;&#160;&#160;&#160;client_config.clientid[OPT_CODE] = DHCP_CLIENT_ID;
    </p>
    <p>
      &#160;&#160;&#160;&#160;client_config.clientid[OPT_LEN] = 7;
    </p>
    <p>
      &#160;&#160;&#160;&#160;client_config.clientid[OPT_DATA] = 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;memcpy(client_config.clientid + 3, client_config.arp, 6);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1510815513709" ID="ID_1777003213" MODIFIED="1510886030070">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /**
    </p>
    <p>
      &#160;* &#35843;&#29992;socketpair()&#21019;&#24314;&#19968;&#23545;&#26080;&#21517;&#12289;&#30456;&#20114;&#36830;&#25509;&#30340;&#22871;&#25509;&#23383;,
    </p>
    <p>
      &#160;* &#29992;&#20110;&#29238;&#23376;&#36827;&#31243;&#38388;&#21452;&#24037;&#36890;&#20449;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      socketpair(AF_UNIX, SOCK_STREAM, 0, signal_pipe);
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1510815514269" FOLDED="true" ID="ID_402493629" MODIFIED="1510892295554">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /**
    </p>
    <p>
      &#160;* &#35774;&#32622;&#20449;&#21495;&#22788;&#29702;&#20989;&#25968;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      signal(SIGUSR1, signal_handler);
    </p>
    <p>
      signal(SIGUSR2, signal_handler);
    </p>
    <p>
      signal(SIGTERM, signal_handler);
    </p>
  </body>
</html></richcontent>
<node CREATED="1510819764108" ID="ID_1132517032" MODIFIED="1510819785830">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static void signal_handler(int sig)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (send(signal_pipe[1], &amp;sig, sizeof(sig), MSG_DONTWAIT) &lt; 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_ERR, &quot;Could not send signal: %s&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1510892530467" ID="ID_426766799" MODIFIED="1510892532424" TEXT="state = INIT_SELECTING;"/>
<node CREATED="1510815514394" ID="ID_1934404446" MODIFIED="1515578011579">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /**
    </p>
    <p>
      &#160;* &#36816;&#34892;/usr/share/uphcpd/default.script&#65292;
    </p>
    <p>
      &#160;* &#20256;&#32473;&#33050;&#26412;&#30340;&#21442;&#25968;&#160;&#160;&quot;deconfig&quot;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      run_script(NULL, &quot;deconfig&quot;);
    </p>
  </body>
</html></richcontent>
<node CREATED="1510819745155" FOLDED="true" ID="ID_1605729674" MODIFIED="1515656118791">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void run_script(struct dhcpMessage *packet, const char *name)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;int pid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;char **envp;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (client_config.script == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/**
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* &#21019;&#24314;&#26032;&#30340;&#36827;&#31243;, &#29992;&#20110;exec script
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;pid = fork();
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (pid) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/**
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#31561;&#24453;&#23376;&#36827;&#31243;&#36816;&#34892;&#32467;&#26463;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;waitpid(pid, NULL, 0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return;
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else if (pid == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;envp = fill_envp(packet);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* exec script */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;execle(client_config.script, client_config.script,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name, NULL, envp);
    </p>
    <p>
      
    </p>
    <p>
      <font color="#e21010">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#e21010">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#22914;&#26524;&#36816;&#34892;&#21040;&#36825;&#37324;, &#35828;&#26126;execle()&#25191;&#34892;&#33050;&#26412;&#20986;&#38169;, </font>
    </p>
    <p>
      <font color="#e21010">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#30452;&#25509;&#32467;&#26463; udhcpc &#30340;&#36816;&#34892; </font>
    </p>
    <p>
      <font color="#e21010">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_ERR, &quot;script %s failed: %s&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;client_config.script, strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit(1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
<node CREATED="1510891247746" ID="ID_59048114" MODIFIED="1515584613517">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      static char **fill_envp(struct dhcpMessage *packet)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;int num_options = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;int i, j;
    </p>
    <p>
      &#160;&#160;&#160;&#160;char **envp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned char *temp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;char over = 0;
    </p>
    <p>
      
    </p>
    <p>
      <font color="#e00707">&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#e00707">&#160;&#160;&#160;&#160;&#160;* &#23454;&#38469;&#20256;&#20837;&#30340;packet=NULL </font>
    </p>
    <p>
      <font color="#e00707">&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (packet == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;num_options = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (i = 0; options[i].code; i++)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (get_option(packet, options[i].code))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;num_options++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (packet-&gt;siaddr) num_options++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((temp = get_option(packet, DHCP_OPTION_OVER)))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;over = *temp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!(over &amp; FILE_FIELD) &amp;&amp; packet-&gt;file[0]) num_options++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!(over &amp; SNAME_FIELD) &amp;&amp; packet-&gt;sname[0]) num_options++;&#160;&#160;&#160; &#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      <font color="#da0808">&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#da0808">&#160;&#160;&#160;&#160;&#160;* &#35774;&#32622;execle()&#20989;&#25968;&#38656;&#35201;&#30340;&#31995;&#32479;&#29615;&#22659;&#21464;&#37327; </font>
    </p>
    <p>
      <font color="#da0808">&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;envp = xmalloc((num_options + 5) * sizeof(char *));
    </p>
    <p>
      &#160;&#160;&#160;&#160;envp[0] = xmalloc(sizeof(&quot;interface=&quot;) + strlen(client_config.interface));
    </p>
    <p>
      &#160;&#160;&#160;&#160;sprintf(envp[0], &quot;interface=%s&quot;, client_config.interface);
    </p>
    <p>
      <font color="#223cdd">&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#223cdd">&#160;&#160;&#160;&#160;&#160;* find_env() &#30340;&#20316;&#29992;&#26159;&#20174;&#31995;&#32479;&#29615;&#22659;&#21464;&#37327;&#23547;&#25214;&#26159;&#21542;&#26377;&#31532;&#19968;&#20010;&#21442;&#25968;&#30693;&#36947;&#30340;&#21464;&#37327; </font>
    </p>
    <p>
      <font color="#223cdd">&#160;&#160;&#160;&#160;&#160;* &#30340;&#35774;&#23450;&#65292;&#22914;&#26524;&#26377;&#65292;&#20989;&#25968;&#21017;&#36820;&#22238;&#31995;&#32479;&#24050;&#32463;&#35774;&#23450;&#30340;&#20540;&#65292;&#21542;&#21017;&#65292;&#20989;&#25968;&#36820;&#22238;&#31532;&#20108; </font>
    </p>
    <p>
      <font color="#223cdd">&#160;&#160;&#160;&#160;&#160;* &#20010;&#21442;&#25968;&#30340;&#35774;&#23450;&#20540; </font>
    </p>
    <p>
      <font color="#223cdd">&#160;&#160;&#160;&#160;&#160;*/ </font>
    </p>
    <p>
      <font color="#223cdd">&#160;&#160;&#160;&#160;envp[1] = find_env(&quot;PATH&quot;, &quot;PATH=/bin:/usr/bin:/sbin:/usr/sbin&quot;); </font>
    </p>
    <p>
      <font color="#223cdd">&#160;&#160;&#160;&#160;envp[2] = find_env(&quot;HOME&quot;, &quot;HOME=/&quot;);</font>
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (packet == NULL) {
    </p>
    <p>
      <font color="#ee1e1e">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#ee1e1e">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#23454;&#38469;&#20256;&#20837;&#30340;packet=NULL, &#20989;&#25968;&#25191;&#34892;&#21040;&#36825;&#37324;&#23601;&#36820;&#22238; </font>
    </p>
    <p>
      <font color="#ee1e1e">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;envp[3] = NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return envp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;envp[3] = xmalloc(sizeof(&quot;ip=255.255.255.255&quot;));
    </p>
    <p>
      &#160;&#160;&#160;&#160;sprintip(envp[3], &quot;ip=&quot;, (unsigned char *) &amp;packet-&gt;yiaddr);
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0, j = 4; options[i].code; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((temp = get_option(packet, options[i].code))) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;envp[j] = xmalloc(upper_length(temp[OPT_LEN - 2], &amp;options[i]) + strlen(options[i].name) + 2);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fill_options(envp[j], temp, &amp;options[i]);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;j++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (packet-&gt;siaddr) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;envp[j] = xmalloc(sizeof(&quot;siaddr=255.255.255.255&quot;));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sprintip(envp[j++], &quot;siaddr=&quot;, (unsigned char *) &amp;packet-&gt;siaddr);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (!(over &amp; FILE_FIELD) &amp;&amp; packet-&gt;file[0]) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* watch out for invalid packets */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;packet-&gt;file[sizeof(packet-&gt;file) - 1] = '\0';
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;envp[j] = xmalloc(sizeof(&quot;boot_file=&quot;) + strlen(packet-&gt;file));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sprintf(envp[j++], &quot;boot_file=%s&quot;, packet-&gt;file);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (!(over &amp; SNAME_FIELD) &amp;&amp; packet-&gt;sname[0]) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* watch out for invalid packets */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;packet-&gt;sname[sizeof(packet-&gt;sname) - 1] = '\0';
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;envp[j] = xmalloc(sizeof(&quot;sname=&quot;) + strlen(packet-&gt;sname));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sprintf(envp[j++], &quot;sname=%s&quot;, packet-&gt;sname);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;envp[j] = NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return envp;
    </p>
    <p>
      }
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
</node>
<node CREATED="1510892300795" ID="ID_1653984023" MODIFIED="1510892555205">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /**
    </p>
    <p>
      &#160;* &#35774;&#32622; listen_mode = LISTEN_RAM
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      change_mode(LISTEN_RAW);
    </p>
  </body>
</html></richcontent>
<node CREATED="1510892362115" ID="ID_1416592524" MODIFIED="1510892421306">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      #define LISTEN_NONE 0
    </p>
    <p>
      #define LISTEN_KERNEL 1
    </p>
    <p>
      #define LISTEN_RAW 2
    </p>
    <p>
      static int listen_mode;
    </p>
    <p>
      
    </p>
    <p>
      static void change_mode(int new_mode)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;close(fd);
    </p>
    <p>
      &#160;&#160;&#160;&#160;fd = -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;listen_mode = new_mode;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1510892559083" ID="ID_891857810" MODIFIED="1510892655101">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /**
    </p>
    <p>
      &#160;* &#36827;&#20837;&#24490;&#29615;, &#30417;&#21548;&#22871;&#25509;&#23383;&#30340;&#29366;&#24577;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      for(;;) { ... }
    </p>
  </body>
</html></richcontent>
<node CREATED="1510892663260" ID="ID_1957760227" MODIFIED="1515674218637">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tv.tv_sec = timeout - time(0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tv.tv_usec = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FD_ZERO(&amp;rfds);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (listen_mode != LISTEN_NONE &amp;&amp; fd &lt; 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (listen_mode == LISTEN_KERNEL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fd = listen_socket(INADDR_ANY, CLIENT_PORT, client_config.interface);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      <font color="#f41313">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#f41313">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* listen_mode &#22312;&#36827;&#24490;&#29615;&#21069;&#35774;&#32622;&#20026;LISTEN_RAM, </font>
    </p>
    <p>
      <font color="#f41313">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#24490;&#29615;&#31532;&#19968;&#27425;&#26102; raw_socket() &#20989;&#25968;&#34987;&#35843;&#29992; </font>
    </p>
    <p>
      <font color="#f41313">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fd = raw_socket(client_config.ifindex);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (fd &lt; 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_ERR, &quot;FATAL: couldn't listen on socket, %s&quot;, strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit_client(0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/**
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#35774;&#32622;&#30417;&#21548;&#30340;&#25991;&#20214;&#25551;&#36848;&#31526;&#38598;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (fd &gt;= 0) FD_SET(fd, &amp;rfds);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FD_SET(signal_pipe[0], &amp;rfds);
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1510893026780" ID="ID_1388915718" MODIFIED="1515655963613">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      int raw_socket(int ifindex)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;int fd;
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct sockaddr_ll sock;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;DEBUG(LOG_INFO, &quot;Opening raw socket on ifindex %d\n&quot;, ifindex);
    </p>
    <p>
      
    </p>
    <p>
      <font color="#dc0a0a">&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#dc0a0a">&#160;&#160;&#160;&#160;&#160;* </font><font color="#150adc">PF_PACKET</font><font color="#dc0a0a">: &#38142;&#36335;&#23618;&#22871;&#25509;&#23383;, &#30452;&#25509;&#20174;&#35774;&#22791;&#39537;&#21160;&#23618;&#25509;&#25910;&#25110;&#21457;&#36865;&#21407;&#22987;&#25968;&#25454;&#21253; </font>
    </p>
    <p>
      <font color="#dc0a0a">&#160;&#160;&#160;&#160;&#160;* </font><font color="#180adc">SOCK_DGEAM</font><font color="#dc0a0a">: &#30456;&#36739;SOCK_RAM&#24314;&#31435;&#22312;&#26356;&#39640;&#23618;, &#22312;&#25509;&#25910;&#26102;, &#29289;&#29702;&#22836;&#22312;&#21040;&#36798;&#29992; </font>
    </p>
    <p>
      <font color="#dc0a0a">&#160;&#160;&#160;&#160;&#160;* &#25143;&#21069;&#34987;&#21435;&#25481;; &#22312;&#21457;&#36865;&#25968;&#25454;&#26102;, &#29289;&#29702;&#22836;&#37096;&#23558;(&#26681;&#25454;&#22320;&#22336;&#32467;&#26500; struct sockaddr_ll) </font>
    </p>
    <p>
      <font color="#dc0a0a">&#160;&#160;&#160;&#160;&#160;* &#22312;&#21457;&#36865;&#21069;&#33258;&#21160;&#28155;&#21152;&#12290;( SOCK_RAM &#29992;&#25143;&#24517;&#39035;&#25552;&#20379;&#31354;&#38388;&#24182;&#26500;&#24314;&#21253;&#25324;&#29289;&#29702;&#22836;&#37096; </font>
    </p>
    <p>
      <font color="#dc0a0a">&#160;&#160;&#160;&#160;&#160;* &#22312;&#20869;&#30340;&#23436;&#25972;&#30340;&#25968;&#25454;&#21253;.&#27492;&#21253;&#23558;&#19981;&#21152;&#20219;&#20309;&#25913;&#21464;&#22320;&#21152;&#20837;&#32593;&#21345;&#39537;&#21160;&#31243;&#24207;&#21457;&#36865;&#38431;&#21015;, </font>
    </p>
    <p>
      <font color="#dc0a0a">&#160;&#160;&#160;&#160;&#160;* &#32780;&#21457;&#36865;&#27492;&#21253;&#30340;&#32593;&#21345;&#23558;&#30001;&#30446;&#30340;&#22320;&#22336;&#30830;&#23450;&#12290;) </font>
    </p>
    <p>
      <font color="#dc0a0a">&#160;&#160;&#160;&#160;&#160;*&#160;</font><font color="#0a14dc">ETH_P_IP</font><font color="#dc0a0a">: Internet Protocol packet, &#36873;&#23450;&#21327;&#35758;&#31867;&#22411;</font>
    </p>
    <p>
      <font color="#dc0a0a">&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((fd = socket(PF_PACKET, SOCK_DGRAM, htons(ETH_P_IP))) &lt; 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DEBUG(LOG_ERR, &quot;socket call failed: %s&quot;, strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;/**
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* PF_PACKET &#21644; AF_PACKET &#22312;linux&#20869;&#26680;&#37324;&#23450;&#20041;&#30340;&#25968;&#20540;&#19978;&#26159;&#30456;&#31561;&#30340;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;* &#19981;&#21516;&#20043;&#22788;&#26159;, &#19968;&#20010;&#20195;&#34920;&#21327;&#35758;&#26063;, &#19968;&#20010;&#20195;&#34920;&#22320;&#22336;&#26063;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;sock.sll_family = AF_PACKET;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sock.sll_protocol = htons(ETH_P_IP); // &#25910;&#21457;&#21327;&#35758;
    </p>
    <p>
      &#160;&#160;&#160;&#160;sock.sll_ifindex = ifindex; // &#32593;&#32476;&#25509;&#21475;&#30340;&#32034;&#24341;&#21495;, &#20026;0&#26102;&#34920;&#31034;&#25152;&#26377;&#25509;&#21475;
    </p>
    <p>
      
    </p>
    <p>
      <font color="#e20404">&#160;&#160;&#160;&#160;/** </font>
    </p>
    <p>
      <font color="#e20404">&#160;&#160;&#160;&#160;&#160;* &#22871;&#25509;&#23383;&#32465;&#23450;&#21040;&#25351;&#23450;&#30340;&#32593;&#32476;&#25509;&#21475;, &#32465;&#23450;&#21518;, &#21457;&#36865;&#30340;&#25968;&#25454;&#21253;&#23558;&#20174;&#36825;&#20010;&#32593;&#32476;&#25509;&#21475;&#20986;, </font>
    </p>
    <p>
      <font color="#e20404">&#160;&#160;&#160;&#160;&#160;* &#21644;&#21482;&#25509;&#25910;&#21040;&#36825;&#20010;&#32593;&#32476;&#25509;&#21475;&#30340;&#25968;&#25454;&#21253;&#12290; </font>
    </p>
    <p>
      <font color="#e20404">&#160;&#160;&#160;&#160;&#160;*/</font>
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (bind(fd, (struct sockaddr *) &amp;sock, sizeof(sock)) &lt; 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DEBUG(LOG_ERR, &quot;bind call failed: %s&quot;, strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;close(fd);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return -1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return fd;
    </p>
    <p>
      }
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1510892664778" ID="ID_1397366115" MODIFIED="1515663134609">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (tv.tv_sec &gt; 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_INFO, &quot;Waiting on select...\n&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_fd = signal_pipe[0] &gt; fd ? signal_pipe[0] : fd;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;retval = select(max_fd + 1, &amp;rfds, NULL, NULL, &amp;tv);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;retval = 0; /* If we already timed out, fall through */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now = time(0);
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1510892665163" ID="ID_498802465" MODIFIED="1515663970941">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (retval == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* timeout dropped to zero */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;switch (state) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case INIT_SELECTING:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (packet_num &lt; 3) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (packet_num == 0)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xid = <font color="#de0c0c">random_xid</font>(); // &#33719;&#21462;&#38543;&#26426;&#25968;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* send discover packet */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<font color="#e41717">send_discover</font>(xid, requested_ip); /* broadcast */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timeout = now + ((packet_num == 2) ? 4 : 2);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;packet_num++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/**
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;* &#36825;&#27573;&#20195;&#30721;&#19968;&#33324;&#27809;&#25191;&#34892;&#21040;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*/
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (client_config.background_if_no_lease) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_INFO, &quot;No lease, forking to background.&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;background();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} else if (client_config.abort_if_no_lease) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_INFO, &quot;No lease, failing.&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit_client(1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* wait to try again */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;packet_num = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timeout = now + 60;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1515663931448" ID="ID_369826745" MODIFIED="1515663956394">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      unsigned long random_xid(void)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;static int initialized;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (!initialized) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int fd;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unsigned long seed;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fd = open(&quot;/dev/urandom&quot;, 0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (fd &lt; 0 || read(fd, &amp;seed, sizeof(seed)) &lt; 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LOG(LOG_WARNING, &quot;Could not load seed from /dev/urandom: %s&quot;,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;strerror(errno));
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;seed = time(0);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (fd &gt;= 0) close(fd);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;srand(seed);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;initialized++;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;return rand();
    </p>
    <p>
      }
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1515663905112" ID="ID_371493336" MODIFIED="1515663925947">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /* Broadcast a DHCP discover packet to the network, with an optionally requested IP */
    </p>
    <p>
      int send_discover(unsigned long xid, unsigned long requested)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct dhcpMessage packet;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;init_packet(&amp;packet, DHCPDISCOVER);
    </p>
    <p>
      &#160;&#160;&#160;&#160;packet.xid = xid;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (requested)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;add_simple_option(packet.options, DHCP_REQUESTED_IP, requested);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;add_requests(&amp;packet);
    </p>
    <p>
      &#160;&#160;&#160;&#160;LOG(LOG_DEBUG, &quot;Sending discover...&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;return raw_packet(&amp;packet, INADDR_ANY, CLIENT_PORT, INADDR_BROADCAST,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SERVER_PORT, MAC_BCAST_ADDR, client_config.ifindex);
    </p>
    <p>
      }
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1515663989616" ID="ID_1131129003" MODIFIED="1515664016405">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /* initialize a packet with the proper defaults */
    </p>
    <p>
      static void init_packet(struct dhcpMessage *packet, char type)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;struct vendor&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char vendor, length;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;char str[sizeof(&quot;udhcp &quot;VERSION)];
    </p>
    <p>
      &#160;&#160;&#160;&#160;} vendor_id = { DHCP_VENDOR,&#160;&#160;sizeof(&quot;udhcp &quot;VERSION) - 1, &quot;udhcp &quot;VERSION};
    </p>
    <p>
      &#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;init_header(packet, type);
    </p>
    <p>
      &#160;&#160;&#160;&#160;memcpy(packet-&gt;chaddr, client_config.arp, 6);
    </p>
    <p>
      &#160;&#160;&#160;&#160;add_option_string(packet-&gt;options, client_config.clientid);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (client_config.hostname) add_option_string(packet-&gt;options, client_config.hostname);
    </p>
    <p>
      &#160;&#160;&#160;&#160;add_option_string(packet-&gt;options, (unsigned char *) &amp;vendor_id);
    </p>
    <p>
      }
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1515664058704" ID="ID_1922560094" MODIFIED="1515981124283">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      void init_header(struct dhcpMessage *packet, char type)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;memset(packet, 0, sizeof(struct dhcpMessage));
    </p>
    <p>
      &#160;&#160;&#160;&#160;switch (type) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;case DHCPDISCOVER:
    </p>
    <p>
      &#160;&#160;&#160;&#160;case DHCPREQUEST:
    </p>
    <p>
      &#160;&#160;&#160;&#160;case DHCPRELEASE:
    </p>
    <p>
      &#160;&#160;&#160;&#160;case DHCPINFORM:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;packet-&gt;op = BOOTREQUEST;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;case DHCPOFFER:
    </p>
    <p>
      &#160;&#160;&#160;&#160;case DHCPACK:
    </p>
    <p>
      &#160;&#160;&#160;&#160;case DHCPNAK:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;packet-&gt;op = BOOTREPLY;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;packet-&gt;htype = ETH_10MB;
    </p>
    <p>
      &#160;&#160;&#160;&#160;packet-&gt;hlen = ETH_10MB_LEN;
    </p>
    <p>
      &#160;&#160;&#160;&#160;packet-&gt;cookie = htonl(DHCP_MAGIC);
    </p>
    <p>
      &#160;&#160;&#160;&#160;packet-&gt;options[0] = DHCP_END;
    </p>
    <p>
      &#160;&#160;&#160;&#160;add_simple_option(packet-&gt;options, DHCP_MESSAGE_TYPE, type);
    </p>
    <p>
      }
    </p>
    <p>
      &#160;
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1515664088153" ID="ID_1223797353" MODIFIED="1515664159726">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /* add a one to four byte option to a packet */
    </p>
    <p>
      int add_simple_option(unsigned char *optionptr, unsigned char code, u_int32_t data)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;char length = 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;int i;
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned char option[2 + 4];
    </p>
    <p>
      &#160;&#160;&#160;&#160;unsigned char *u8;
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_int16_t *u16;
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_int32_t *u32;
    </p>
    <p>
      &#160;&#160;&#160;&#160;u_int32_t aligned;
    </p>
    <p>
      &#160;&#160;&#160;&#160;u8 = (unsigned char *) &amp;aligned;
    </p>
    <p>
      &#160;&#160;&#160;&#160;u16 = (u_int16_t *) &amp;aligned;
    </p>
    <p>
      &#160;&#160;&#160;&#160;u32 = &amp;aligned;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (i = 0; options[i].code; i++)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (options[i].code == code) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;length = option_lengths[options[i].flags &amp; TYPE_MASK];
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (!length) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DEBUG(LOG_ERR, &quot;Could not add option 0x%02x&quot;, code);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 0;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;option[OPT_CODE] = code;
    </p>
    <p>
      &#160;&#160;&#160;&#160;option[OPT_LEN] = length;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;switch (length) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case 1: *u8 =&#160;&#160;data; break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case 2: *u16 = data; break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;case 4: *u32 = data; break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;memcpy(option + 2, &amp;aligned, length);
    </p>
    <p>
      &#160;&#160;&#160;&#160;return add_option_string(optionptr, option);
    </p>
    <p>
      }
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1510892665706" ID="ID_1345127630" MODIFIED="1510892665706" TEXT=""/>
<node CREATED="1510892666524" ID="ID_1085197544" MODIFIED="1510892666524" TEXT=""/>
</node>
</node>
<node CREATED="1510814690842" ID="ID_602125460" MODIFIED="1510814690842" TEXT=""/>
<node CREATED="1510814691270" ID="ID_1193840174" MODIFIED="1510814691270" TEXT=""/>
<node CREATED="1510814692246" ID="ID_1723534462" MODIFIED="1510814692246" TEXT=""/>
</node>
</node>
</map>
